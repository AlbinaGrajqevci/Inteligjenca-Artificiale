package exercises;
import java.io.*;
import java.util.*;

public class BFSTraversal {   
	    private int vertex;       /* total number number of vertices in the graph */    
	    private LinkedList<Integer> adj[];      /* adjacency list */    
	    private Queue<Integer> que;           /* maintaining a queue */    
	    BFSTraversal(int v)    
	    {    
	        vertex = v;    
	        adj = new LinkedList[vertex];    
	        for (int i=0; i<v; i++)    
	        {    
	            adj[i] = new LinkedList<>();    
	        }    
	        que = new LinkedList<Integer>();    
	    }    
	    void insertEdge(int v,int w)    
	    {    
	        adj[v].add(w);      /* adding an edge to the adjacency list (edges are bidirectional in this example) */    
	    }    
	    void BFS(int n)    
	    {    
	        boolean nodes[] = new boolean[vertex];       /* initialize boolean array for holding the data */    
	        int a = 0;    
	        nodes[n]=true;                      
	        que.add(n);       /* root node is added to the top of the queue */    
	        while (que.size() != 0)    
	        {    
	            n = que.poll();        /* remove the top element of the queue */     
	            System.out.print(n+" ");    /* print the top element of the queue */    
	            for (int i = 0; i < adj[n].size(); i++)  /* iterate through the linked list and push all neighbors into queue */    
	            {    
	                a = adj[n].get(i);    
	                if (!nodes[a])      /* only insert nodes into queue if they have not been explored already */    
	                {    
	                    nodes[a] = true;    
	                    que.add(a);    
	                }    
	            }      
	        }    
	    }    
	    
	    public List<Integer> findPath(int start, int end) {
	        boolean[] visited = new boolean[vertex]; // keep track of visited nodes
	        int[] parent = new int[vertex]; // keep track of parent node for each node in the path
	        Arrays.fill(parent, -1); // initialize parent array to -1
	        Queue<Integer> queue = new LinkedList<>();
	        List<Integer> path = new ArrayList<>();
	        
	        visited[start] = true;
	        queue.offer(start);
	        
	        while (!queue.isEmpty()) {
	            int curr = queue.poll();
	            
	            if (curr == end) { // path found, construct path and return
	                int node = end;
	                while (node != start) {
	                    path.add(0, node);
	                    node = parent[node];
	                }
	                path.add(0, start);
	                return path;
	            }
	            
	            // visit neighbors of current node
	            Iterator<Integer> it = adj[curr].listIterator();
	            while (it.hasNext()) {
	                int neighbor = it.next();
	                if (!visited[neighbor]) {
	                    visited[neighbor] = true;
	                    parent[neighbor] = curr;
	                    queue.offer(neighbor);
	                }
	            }
	        }
	        
	        return path; // path not found, return empty list
	    }
	
	
	    public static void main(String args[])    
	    {    
	        BFSTraversal graph = new BFSTraversal(10);    
	        graph.insertEdge(0, 1);    
	        graph.insertEdge(0, 2);    
	        graph.insertEdge(1, 3);
	        graph.insertEdge(1, 4);
	        graph.insertEdge(2, 5);
	        graph.insertEdge(2, 6);
	        graph.insertEdge(3, 7);
	        graph.insertEdge(4, 8);
	        graph.insertEdge(4, 9);
	        System.out.println("Breadth First Traversal for the graph is:");    
	        graph.BFS(0);  
	        System.out.println();
	        List<Integer> l = new ArrayList<>();
	        l = graph.findPath(0, 9);
	        for (int i = 0; i < l.size(); i++) {
	        	System.out.print(l.get(i) + " ");
	        }
	    }  
}